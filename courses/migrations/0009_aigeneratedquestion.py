# Generated by Django 5.1 on 2025-08-27 17:53

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0008_remove_expertquestion_courses_exp_is_miss_438274_idx_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIGeneratedQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_question_id', models.CharField(help_text='ID from research_source_materials.csv - maps to ExpertQuestion.question_id', max_length=200)),
                ('domain', models.CharField(help_text='Subject domain', max_length=100)),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('ESSAY', 'Essay Question'), ('SHORT_ANSWER', 'Short Answer'), ('TRUE_FALSE', 'True/False')], max_length=20)),
                ('source_material', models.TextField(help_text='Original educational content')),
                ('reference_question', models.TextField(help_text='Target question from CSV for style reference')),
                ('generated_question_text', models.TextField(help_text='AI-generated question')),
                ('generation_params', models.JSONField(default=dict, help_text='Parameters used for generation (model, tokens, temperature, etc.)')),
                ('generation_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('generation_timestamp', models.DateTimeField(auto_now_add=True)),
                ('processing_duration', models.FloatField(blank=True, help_text='Time taken to generate in seconds', null=True)),
                ('quality_score', models.FloatField(blank=True, help_text='AI confidence score (0-1)', null=True)),
                ('expert_rating', models.FloatField(blank=True, help_text='Expert evaluation score (1-5)', null=True)),
                ('educational_value_score', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Expert rating for educational value', null=True)),
                ('clarity_score', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Expert rating for clarity', null=True)),
                ('difficulty_appropriateness', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Expert rating for difficulty appropriateness', null=True)),
                ('blooms_taxonomy_level', models.CharField(blank=True, choices=[('remember', 'Remember'), ('understand', 'Understand'), ('apply', 'Apply'), ('analyze', 'Analyze'), ('evaluate', 'Evaluate'), ('create', 'Create')], help_text='Cognitive level as rated by expert', max_length=20)),
                ('is_selected_for_research', models.BooleanField(default=True, help_text='Whether this question is part of research dataset')),
                ('research_batch', models.CharField(blank=True, help_text='Research batch identifier', max_length=100)),
                ('bleu_score', models.FloatField(blank=True, null=True)),
                ('meteor_score', models.FloatField(blank=True, null=True)),
                ('rouge_score', models.FloatField(blank=True, null=True)),
                ('question_length', models.IntegerField(blank=True, null=True)),
                ('vocabulary_diversity', models.FloatField(blank=True, null=True)),
                ('syntactic_complexity', models.FloatField(blank=True, null=True)),
                ('model_used', models.CharField(default='gpt-35-turbo-instruct-0914', help_text='AI model used for generation', max_length=100)),
                ('prompt_template', models.TextField(blank=True, help_text='Template used for generation prompt')),
                ('error_message', models.TextField(blank=True, help_text='Error message if generation failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expert_question', models.ForeignKey(blank=True, help_text='Direct reference to the original ExpertQuestion model', null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.expertquestion')),
            ],
            options={
                'db_table': 'courses_ai_generated_question',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['original_question_id'], name='courses_ai__origina_d57f45_idx'), models.Index(fields=['domain'], name='courses_ai__domain_7c708a_idx'), models.Index(fields=['question_type'], name='courses_ai__questio_380e02_idx'), models.Index(fields=['generation_status'], name='courses_ai__generat_ac0a2a_idx'), models.Index(fields=['is_selected_for_research'], name='courses_ai__is_sele_ec50b0_idx'), models.Index(fields=['research_batch'], name='courses_ai__researc_2574fe_idx')],
            },
        ),
    ]
