# Generated by Django 5.1 on 2025-08-14 19:17

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0004_remove_coursecontent_course_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExpertQuestionDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Dataset name (e.g., 'LearningQ Research Sample')", max_length=200)),
                ('description', models.TextField(blank=True)),
                ('source_type', models.CharField(choices=[('research', 'Research Dataset'), ('custom', 'Custom Expert Questions'), ('imported', 'Imported Questions')], default='research', max_length=50)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-upload_date'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedCourseContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content_type', models.CharField(choices=[('PDF', 'PDF Document'), ('DOCX', 'Word Document'), ('TXT', 'Text File'), ('CSV', 'Expert Questions (CSV)'), ('JSON', 'Expert Questions (JSON)'), ('VIDEO', 'Video Transcript'), ('URL', 'Web Content')], max_length=20)),
                ('content_file', models.FileField(blank=True, help_text='Upload PDF, DOCX, TXT, CSV, or JSON file', null=True, upload_to='enhanced_course_contents/')),
                ('text_content', models.TextField(blank=True, help_text='Or paste content directly')),
                ('content_url', models.URLField(blank=True, help_text='URL for web-based content')),
                ('is_processed', models.BooleanField(default=False)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending Processing'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=50)),
                ('processing_error', models.TextField(blank=True)),
                ('extracted_text', models.TextField(blank=True, help_text='Processed text content')),
                ('word_count', models.IntegerField(default=0)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('last_processed', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_contents', to='courses.course')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionGenerationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('use_expert_questions', models.BooleanField(default=True)),
                ('expert_question_domains', models.CharField(blank=True, help_text="Comma-separated domains to include (e.g., 'Science,Math')", max_length=500)),
                ('expert_question_types', models.CharField(choices=[('MCQ', 'MCQ Only'), ('ESSAY', 'Essay Only'), ('MIXED', 'Mixed Types')], default='MIXED', max_length=100)),
                ('similarity_threshold', models.FloatField(default=0.7, help_text='Minimum similarity to expert questions (0.0-1.0)')),
                ('max_expert_examples', models.IntegerField(default=5, help_text='Maximum expert questions to use as examples')),
                ('custom_prompt_prefix', models.TextField(blank=True, help_text='Custom instructions to add to AI prompts')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generation_templates', to='courses.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExpertQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.CharField(max_length=200, unique=True)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('ESSAY', 'Essay Question'), ('SHORT_ANSWER', 'Short Answer'), ('TRUE_FALSE', 'True/False')], max_length=20)),
                ('source_material', models.TextField(blank=True, help_text='Original educational content')),
                ('domain', models.CharField(blank=True, max_length=100)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('video_title', models.CharField(blank=True, max_length=500)),
                ('video_youtube_link', models.URLField(blank=True)),
                ('video_id', models.CharField(blank=True, max_length=100)),
                ('file_source', models.CharField(blank=True, max_length=200)),
                ('times_used_as_template', models.IntegerField(default=0)),
                ('quality_rating', models.FloatField(blank=True, help_text='Expert quality rating (1-5)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.expertquestiondataset')),
            ],
            options={
                'ordering': ['question_id'],
                'indexes': [models.Index(fields=['question_type', 'domain'], name='courses_exp_questio_cd2a63_idx'), models.Index(fields=['difficulty_level'], name='courses_exp_difficu_eb81dc_idx')],
            },
        ),
    ]
